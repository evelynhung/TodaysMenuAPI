type Dish {
    id: ID!
    name: String!
    meal: Meal!
    ingredients: [RecipeIngredient]!
    spicy: Float
    cook_time: Int
    recipe_link: String
    serving: Int
    one_dish: Boolean
    soup: Boolean
    style: String
    photo: Photo
}

type Photo {
    filename: String
    mimetype: String
    encoding: String
}

enum Meal {
    lunch
    dinner
}

type RecipeIngredient {
    ingredient: Ingredient!
    quantity: String!
}

type Ingredient {
    id: ID!
    name: String!
    category: String!
}

input ShareableMenuInput {
    "Opaque base64 encoded payload"
    payload: String!
}

type ShareableMenu {
    success: Boolean!
    message: String
    "Short shareable key"
    key: String
}

scalar Upload

input NewDishInput {
    name: String!
    meal: Meal!
    ingredient: [DishRecipeIngredientINput]!
    spicy: Float
    cook_time: Int
    recipe_link: String
    amount: Int
    one_dish: Boolean
    soup: Boolean
    style: String
    photo: Upload
}

input UpdateDishInput {
    id: ID!
    name: String!
    meal: Meal!
    ingredient: [DishRecipeIngredientINput]!
    spicy: Float
    cook_time: Int
    recipe_link: String
    amount: Int
    one_dish: Boolean
    soup: Boolean
    style: String
    photo: Upload
}

input DishRecipeIngredientINput {
    name: String!
    quantity: String!
}

input NewIngredientInput {
    name: String!
    category: String!
}

input UpdateIngredientInput {
    id: ID!
    name: String!
    category: String!
}

type MutationResult {
    success: Boolean!
    message: String
}

type Query {
    dishes: [Dish]
    ingredients: [Ingredient]
}

type Mutation {
    shareMenu(menu: ShareableMenuInput): ShareableMenu
    addNewDishes(dishes: [NewDishInput]): MutationResult
    updateDishes(dishes: [UpdateDishInput]): MutationResult
    addNewIngredients(ingredients: [NewIngredientInput]): MutationResult
}
